---
swagger: "2.0"
info:
  description: "This is a draft of the Physio PoseNet API."
  version: "1.0.0"
  title: "Physio PoseNet"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "physio.test.sqooba.io"
basePath: "/"
tags:
- name: "poses"
  description: "Everything about your poses"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "electrodes"
  description: "Everything about your electrodes"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "front"
  description: "The static pages"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
security:
- api_key: []
paths:
  /{path}:
    get:
      tags:
      - "front"
      summary: "Get the home page"
      operationId: "front_get"
      produces:
      - "text/html; charset=utf-8"
      - "text/javascript; charset=utf-8"
      - "image/x-icon"
      parameters:
      - name: "path"
        in: "path"
        description: "path of file"
        required: true
        type: "string"
      responses:
        200:
          description: "The home page"
      x-swagger-router-controller: "swagger_server.controllers.front_controller"
  /api/poses:
    get:
      tags:
      - "poses"
      summary: "Get all poses in the library"
      operationId: "api_poses_get"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "All available poses"
      x-swagger-router-controller: "swagger_server.controllers.poses_controller"
    post:
      tags:
      - "poses"
      summary: "Add a new pose to the library"
      description: ""
      operationId: "add_pose"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "file"
        in: "formData"
        description: "Picture showing the pose that needs to be added to the library"
        required: true
        type: "file"
      responses:
        201:
          description: "Pose has been added successfully"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.poses_controller"
  /api/poses/{poseId}:
    get:
      tags:
      - "poses"
      summary: "Find pose by ID"
      description: "Returns a single pose"
      operationId: "get_pose_by_id"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "poseId"
        in: "path"
        description: "ID of pose to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tag"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pose not found"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.poses_controller"
  /api/poses/{poseId}/images/raw/{index}:
    get:
      tags:
      - "poses"
      summary: "Find image for a pose by index"
      description: "Returns a single image"
      operationId: "get_image_by_pose_id_and_index"
      produces:
      - "image/*"
      parameters:
      - name: "poseId"
        in: "path"
        description: "ID of pose to return"
        required: true
        type: "string"
      - name: "index"
        in: "path"
        description: "index of the image"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pose not found"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.poses_controller"
  /api/poses/{poseId}/images/skeleton/{index}:
    get:
      tags:
      - "poses"
      summary: "Find image with skeleton for a pose by index"
      description: "Returns a single image with skeleton"
      operationId: "get_image_with_skeleton_by_pose_id_and_index"
      produces:
      - "image/*"
      parameters:
      - name: "poseId"
        in: "path"
        description: "ID of pose to return"
        required: true
        type: "string"
      - name: "index"
        in: "path"
        description: "index of the image"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pose not found"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.poses_controller"
  /api/poses/{poseId}/check:
    post:
      tags:
      - "poses"
      summary: "Validates a pose"
      description: "Validates a pose (sent in body) against the keypoints/skeleton\
        \ in server"
      operationId: "validate_pose"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "poseId"
        in: "path"
        description: "ID of pose to validate"
        required: true
        type: "string"
      - name: "file"
        in: "formData"
        description: "image of the pose to validate"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.poses_controller"
  /api/electrodes:
    get:
      tags:
      - "electrodes"
      summary: "Get all electrodes in the library"
      operationId: "api_electrodes_get"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "All available electrodes"
      x-swagger-router-controller: "swagger_server.controllers.electrodes_controller"
    post:
      tags:
      - "electrodes"
      summary: "Add a new electrode to the library"
      description: ""
      operationId: "add_electrode"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "file"
        in: "formData"
        description: "Picture showing the electrode that needs to be added to the\
          \ library"
        required: true
        type: "file"
      responses:
        201:
          description: "Electrode has been added successfully"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.electrodes_controller"
  /api/electrodes/{electrodeId}/images/raw/{index}:
    get:
      tags:
      - "electrodes"
      summary: "Find image for an electrode by index"
      description: "Returns a single image"
      operationId: "get_image_by_electrode_id_and_index"
      produces:
      - "image/*"
      parameters:
      - name: "electrodeId"
        in: "path"
        description: "ID of electrode to return"
        required: true
        type: "string"
      - name: "index"
        in: "path"
        description: "index of the image"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Electrode not found"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.electrodes_controller"
  /api/electrodes/{electrodeId}/check:
    post:
      tags:
      - "electrodes"
      summary: "Validates electrodes position"
      description: "Validates the electrodes (sent in body) against the reference\
        \ in server"
      operationId: "validate_electrodes"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "electrodeId"
        in: "path"
        description: "ID of electrode to validate"
        required: true
        type: "string"
      - name: "file"
        in: "formData"
        description: "image of the electrode to validate"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.electrodes_controller"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
    example:
      name: "name"
      id: 0
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
